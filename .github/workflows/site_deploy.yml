# This is a basic workflow to help you get started with Actions

name: CD-sites

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled?'     
        required: false
        default: 'false'
      vcell_version:
        description: 'version.major.minor' 
        required: true
        default: '7.4.0'
      vcell_build:
        description: 'build number'
        required: true
        default: '23'
      vcell_site:
        description: 'rel or alpha'
        required: true
        default: 'alpha'
      server_only:
        description: 'Deploy only the server components?'
        required: true
        default: 'false'
      commit_hash:
        description: sha hash of commit to be deployed
        required: true
        default: 'bdea85b98a40035e05c1d1531f689a4f167ad93c'
jobs:
  build:
    name: Build client installers
    runs-on: ubuntu-latest
    steps:
    - name: checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.commit_hash }}
        fetch-depth: 0
    - name: setup global environment variables
      run: |
        echo "VCELL_VERSION=${{ github.event.inputs.vcell_version }}" >> $GITHUB_ENV
        echo "VCELL_BUILD=${{ github.event.inputs.vcell_build }}" >> $GITHUB_ENV
        echo "VCELL_SITE=${{ github.event.inputs.vcell_site }}" >> $GITHUB_ENV
        echo "VCELL_TAG=`git rev-parse HEAD | cut -c -7`" >> $GITHUB_ENV
        echo "VCELL_REPO_NAMESPACE=ghcr.io/virtualcell" >> $GITHUB_ENV
        if [ "${{ github.event.inputs.vcell_site }}" == "rel" ]; then\
        	echo "MANAGER_NODE=vcellapi.cam.uchc.edu" >> $GITHUB_ENV;\
        	echo "VCELL_INSTALLER_REMOTE_DIR="/share/apps/vcell3/apache_webroot/htdocs/webstart/Rel"" >> $GITHUB_ENV;\
        else if [ "${{ github.event.inputs.vcell_site }}" == "alpha" ]; then\
         	echo "MANAGER_NODE=vcellapi-beta.cam.uchc.edu" >> $GITHUB_ENV;\
        	echo "VCELL_INSTALLER_REMOTE_DIR="/share/apps/vcell3/apache_webroot/htdocs/webstart/Alpha"" >> $GITHUB_ENV;\
        else echo "Uknown site name ${{ github.event.inputs.vcell_site }}"; exit 1; fi; fi
    - name: get installer secrets
      run: |
        sudo mkdir /usr/local/deploy
        sudo chmod 777 /usr/local/deploy
        cd /usr/local/deploy
        echo "StrictHostKeyChecking no" >> ssh_prepend
        echo "UserKnownHostsFile=/dev/null" >> ssh_prepend
        cat /etc/ssh/ssh_config >> ssh_prepend
        sudo cp -f ssh_prepend /etc/ssh/ssh_config
        sshpass -p ${{ secrets.CD_FULL_PASS }} scp ${{ secrets.CD_FULL_USER }}@biosim-submit-ext.cam.uchc.edu:/share/apps/vcell3/deployed_docker/deploy_dir.tar .
        cd ..
        sudo tar -xvf deploy/deploy_dir.tar
        sudo chmod 777 -R deploy
    - name: setup config and build
      run: |
        cd docker/swarm
        export "VCELL_CONFIG_FILE_NAME=server_${VCELL_SITE}_${VCELL_VERSION}_${VCELL_BUILD}_${VCELL_TAG}.config"
        echo "VCELL_CONFIG_FILE_NAME=$VCELL_CONFIG_FILE_NAME" >> $GITHUB_ENV
        ./serverconfig-uch.sh $VCELL_SITE $VCELL_REPO_NAMESPACE $VCELL_TAG $VCELL_VERSION $VCELL_BUILD $VCELL_CONFIG_FILE_NAME
        sudo docker login -u ${{ secrets.ACTION_USER }} -p ${{ secrets.ACTION_TOKEN }} ghcr.io
        sudo docker pull $VCELL_REPO_NAMESPACE/vcell-clientgen:$VCELL_TAG
        ./generate_installers.sh ./${VCELL_CONFIG_FILE_NAME}
        env | grep VCELL > variables
    - name: send home config file
      run: |
        sshpass -p ${{ secrets.CD_FULL_PASS }} scp docker/swarm/$VCELL_CONFIG_FILE_NAME ${{ secrets.CD_FULL_USER }}@biosim-submit-ext.cam.uchc.edu:/share/apps/vcell3/deployed_docker/$VCELL_CONFIG_FILE_NAME
    - name: upload generated installers and variables
      uses: actions/upload-artifact@v2
      with:
        name: installers
        path: |
          docker/swarm/generated_installers
          docker/swarm/variables
        retention-days: 1
    - name: Setup tmate session 1
      uses: mxschmitt/action-tmate@v3
      if: ${{ failure() || github.event.inputs.debug_enabled }}
      
  notarize:
    name: Notarize the MacOS client
    runs-on: macos-latest
    needs: build
    steps:
    - name: download generated installers
      uses: actions/download-artifact@v2
    - name: notarize mac installer
      run: |
        cd installers
        export MAC_INSTALLER=`ls generated_installers/*dmg`
        xcrun altool --notarize-app --primary-bundle-id "org.vcell.i4jmacos" --username "${{ secrets.MACID }}" --password "${{ secrets.MACPW }}" --file $MAC_INSTALLER > altool_output
        cat altool_output | grep UUID | cut -d " " -f3 > UUID
        sleep 300
        xcrun altool --notarization-info `cat UUID` --username "${{ secrets.MACID }}" --password "${{ secrets.MACPW }}" > status
        xcrun stapler staple $MAC_INSTALLER
    - name: Setup tmate session 2
      uses: mxschmitt/action-tmate@v3
      if: ${{ failure() || github.event.inputs.debug_enabled }}
    - name: update generated installers
      uses: actions/upload-artifact@v2
      with:
        name: installers
        path: installers
        retention-days: 1
        
  deploy:
    name: Deploy to site
    runs-on: ubuntu-latest
    needs: notarize
    steps:
    - name: checkout commit
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.commit_hash }}
        fetch-depth: 0 
    - name: retrieve installers and variables
      uses: actions/download-artifact@v2
    - name: setenv
      run: |
        cd installers
        for line in $(cat variables); do echo line >> $GITHUB_ENV; done
        mkdir ../docker/swarm/generated_installers
        mv generated_installers/* ../docker/swarm/generated_installers
    - name: retrieve config file
      run: |
        echo "StrictHostKeyChecking no" >> ssh_prepend
        echo "UserKnownHostsFile=/dev/null" >> ssh_prepend
        cat /etc/ssh/ssh_config >> ssh_prepend
        sudo cp -f ssh_prepend /etc/ssh/ssh_config
        cd docker/swarm
        sshpass -p ${{ secrets.CD_FULL_PASS }} scp ${{ secrets.CD_FULL_USER }}@biosim-submit-ext.cam.uchc.edu:/share/apps/vcell3/deployed_docker/${VCELL_CONFIG_FILE_NAME} .
    - name: Setup tmate session 3
      uses: mxschmitt/action-tmate@v3
      if: ${{ failure() || github.event.inputs.debug_enabled }}
      